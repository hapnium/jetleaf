import '../../../optional.dart';
import '../base_stream.dart';
import '_double_stream.dart';
import '../int/int_stream.dart';

/// {@template double_stream}
/// A sequence of primitive `double`-valued elements supporting sequential and parallel
/// aggregate operations.
/// 
/// This is the `double` primitive specialization of [BaseStream]. It enables
/// functional-style operations including transformation, filtering, reduction, and
/// terminal collection.
/// 
/// ## Example Usage
/// ```dart
/// // Create a DoubleStream from values
/// final average = DoubleStream.of([1.5, 2.5, 3.5, 4.5])
///     .filter((d) => d > 2.0)
///     .average();
/// print(average); // 3.5
/// 
/// // Statistical operations
/// final stats = DoubleStream.of([1.1, 2.2, 3.3, 4.4, 5.5])
///     .summaryStatistics();
/// print('Sum: ${stats.sum}');
/// print('Average: ${stats.average}');
/// 
/// // Complex transformations
/// final result = DoubleStream.of([1.0, 2.0, 3.0, 4.0, 5.0])
///     .map((d) => d * d)
///     .filter((d) => d > 10.0)
///     .toList();
/// ```
/// 
/// {@endtemplate}
abstract class DoubleStream extends BaseStream<double, DoubleStream> {
  /// {@macro double_stream}
  DoubleStream();

  /// Creates a [DoubleStream] from the given values.
  /// 
  /// ## Example
  /// ```dart
  /// final stream = DoubleStream.of([1.5, 2.5, 3.5]);
  /// ```
  /// 
  /// {@macro double_stream}
  factory DoubleStream.of(Iterable<double> values) = DoubleStreamImplementation.of;

  /// Creates an empty [DoubleStream].
  /// 
  /// ## Example
  /// ```dart
  /// final stream = DoubleStream.empty();
  /// print(stream.count()); // 0
  /// ```
  /// 
  /// {@macro double_stream}
  factory DoubleStream.empty() = DoubleStreamImplementation.empty;

  // Intermediate operations

  /// Filters elements based on the given predicate.
  /// 
  /// ## Example
  /// ```dart
  /// final positive = DoubleStream.of([-1.5, 2.5, -3.5, 4.5])
  ///     .filter((d) => d > 0);
  /// ```
  DoubleStream filter(bool Function(double) predicate);

  /// Transforms each element using the provided mapping function.
  /// 
  /// ## Example
  /// ```dart
  /// final squares = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .map((d) => d * d);
  /// ```
  DoubleStream map(double Function(double) mapper);

  /// Maps each element to an `int`, returning an [IntStream].
  /// 
  /// ## Example
  /// ```dart
  /// final rounded = DoubleStream.of([1.7, 2.3, 3.9])
  ///     .mapToInt((d) => d.round());
  /// ```
  IntStream mapToInt(int Function(double) mapper);

  /// Flattens nested `DoubleStream`s generated by the mapping function.
  /// 
  /// ## Example
  /// ```dart
  /// final expanded = DoubleStream.of([1.0, 2.0])
  ///     .flatMap((d) => DoubleStream.of([d, d * 2]));
  /// ```
  DoubleStream flatMap(DoubleStream Function(double) mapper);

  /// Returns a stream with duplicate elements removed.
  /// 
  /// ## Example
  /// ```dart
  /// final unique = DoubleStream.of([1.5, 2.5, 2.5, 3.5])
  ///     .distinct();
  /// ```
  DoubleStream distinct();

  /// Returns the stream sorted in natural (ascending) order.
  /// 
  /// ## Example
  /// ```dart
  /// final sorted = DoubleStream.of([3.5, 1.5, 4.5, 2.5])
  ///     .sorted();
  /// ```
  DoubleStream sorted();

  /// Applies the action to each element and returns the same stream.
  /// 
  /// ## Example
  /// ```dart
  /// final result = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .peek((d) => print('Processing: $d'))
  ///     .map((d) => d * 2)
  ///     .toList();
  /// ```
  DoubleStream peek(void Function(double) action);

  /// Limits the stream to at most [maxSize] elements.
  /// 
  /// ## Example
  /// ```dart
  /// final first3 = DoubleStream.of([1.1, 2.2, 3.3, 4.4, 5.5])
  ///     .limit(3);
  /// ```
  DoubleStream limit(int maxSize);

  /// Skips the first [n] elements.
  /// 
  /// ## Example
  /// ```dart
  /// final afterFirst2 = DoubleStream.of([1.1, 2.2, 3.3, 4.4, 5.5])
  ///     .skip(2);
  /// ```
  DoubleStream skip(int n);

  /// Takes elements while the predicate returns `true`.
  /// 
  /// ## Example
  /// ```dart
  /// final lessThan3 = DoubleStream.of([1.1, 2.2, 3.3, 4.4])
  ///     .takeWhile((d) => d < 3.0);
  /// ```
  DoubleStream takeWhile(bool Function(double) predicate);

  /// Drops elements while the predicate is `true`, then returns the remainder.
  /// 
  /// ## Example
  /// ```dart
  /// final from3 = DoubleStream.of([1.1, 2.2, 3.3, 4.4])
  ///     .dropWhile((d) => d < 3.0);
  /// ```
  DoubleStream dropWhile(bool Function(double) predicate);

  // Terminal operations

  /// Applies the provided action to each element.
  /// 
  /// ## Example
  /// ```dart
  /// DoubleStream.of([1.5, 2.5, 3.5])
  ///     .forEach(print); // prints 1.5, 2.5, 3.5
  /// ```
  void forEach(void Function(double) action);

  /// Applies the action to elements in encounter order.
  /// 
  /// ## Example
  /// ```dart
  /// DoubleStream.of([1.5, 2.5, 3.5])
  ///     .forEachOrdered(print); // prints 1.5, 2.5, 3.5 in order
  /// ```
  void forEachOrdered(void Function(double) action);

  /// Collects elements into a [List] of `double`.
  /// 
  /// ## Example
  /// ```dart
  /// final list = DoubleStream.of([1.5, 2.5, 3.5]).toList();
  /// ```
  List<double> toList();

  /// Reduces the stream using the identity and associative binary operator.
  /// 
  /// ## Example
  /// ```dart
  /// final sum = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .reduce(0.0, (a, b) => a + b); // 7.5
  /// ```
  double reduce(double identity, double Function(double, double) op);

  /// Returns an [Optional] reduction result.
  /// 
  /// ## Example
  /// ```dart
  /// final max = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .reduceOptional((a, b) => a > b ? a : b);
  /// ```
  Optional<double> reduceOptional(double Function(double, double) op);

  /// Sums the elements of the stream.
  /// 
  /// ## Example
  /// ```dart
  /// final sum = DoubleStream.of([1.5, 2.5, 3.5]).sum(); // 7.5
  /// ```
  double sum();

  /// Returns the minimum element or an empty [Optional].
  /// 
  /// ## Example
  /// ```dart
  /// final min = DoubleStream.of([3.5, 1.5, 4.5]).min(); // Optional(1.5)
  /// ```
  Optional<double> min();

  /// Returns the maximum element or an empty [Optional].
  /// 
  /// ## Example
  /// ```dart
  /// final max = DoubleStream.of([3.5, 1.5, 4.5]).max(); // Optional(4.5)
  /// ```
  Optional<double> max();

  /// Returns the count of elements.
  /// 
  /// ## Example
  /// ```dart
  /// final count = DoubleStream.of([1.5, 2.5, 3.5]).count(); // 3
  /// ```
  int count();

  /// Computes and returns the average, or an empty [Optional] if the stream is empty.
  /// 
  /// ## Example
  /// ```dart
  /// final avg = DoubleStream.of([1.0, 2.0, 3.0]).average(); // Optional(2.0)
  /// ```
  Optional<double> average();

  /// Returns `true` if any element matches the predicate.
  /// 
  /// ## Example
  /// ```dart
  /// final hasLarge = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .anyMatch((d) => d > 3.0); // true
  /// ```
  bool anyMatch(bool Function(double) predicate);

  /// Returns `true` if all elements match the predicate.
  /// 
  /// ## Example
  /// ```dart
  /// final allPositive = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .allMatch((d) => d > 0); // true
  /// ```
  bool allMatch(bool Function(double) predicate);

  /// Returns `true` if none match the predicate.
  /// 
  /// ## Example
  /// ```dart
  /// final noNegative = DoubleStream.of([1.5, 2.5, 3.5])
  ///     .noneMatch((d) => d < 0); // true
  /// ```
  bool noneMatch(bool Function(double) predicate);

  /// Returns the first element, if available.
  /// 
  /// ## Example
  /// ```dart
  /// final first = DoubleStream.of([1.5, 2.5, 3.5]).findFirst(); // Optional(1.5)
  /// ```
  Optional<double> findFirst();

  /// Returns any element of the stream.
  /// 
  /// ## Example
  /// ```dart
  /// final any = DoubleStream.of([1.5, 2.5, 3.5]).findAny(); // Optional(some element)
  /// ```
  Optional<double> findAny();
}